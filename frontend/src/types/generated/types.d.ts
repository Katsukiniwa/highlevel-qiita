import { gql } from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

export type Category = {
  __typename?: 'Category';
  createdAt: Scalars['ISO8601DateTime'];
  icon: Scalars['String'];
  id: Scalars['Int'];
  name: Scalars['String'];
  nameEn: Scalars['String'];
  questions: Array<Question>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Comment = {
  __typename?: 'Comment';
  content: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['Int'];
  question: Question;
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
};

/** Autogenerated input type of CreateLink */
export type CreateLinkInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  description: Scalars['String'];
  url: Scalars['String'];
};

/** Autogenerated input type of CreateVote */
export type CreateVoteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  linkId?: InputMaybe<Scalars['ID']>;
};

export type Email_Auth_Credentials = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type EmailAuthProviderSignUpData = {
  credentials?: InputMaybe<Email_Auth_Credentials>;
};

export type Link = {
  __typename?: 'Link';
  description: Scalars['String'];
  id: Scalars['ID'];
  postedBy?: Maybe<User>;
  url: Scalars['String'];
  votes: Array<Vote>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createLink?: Maybe<Link>;
  createVote?: Maybe<Vote>;
  signInUser?: Maybe<SignInUserPayload>;
  signUp?: Maybe<User>;
};


export type MutationCreateLinkArgs = {
  input: CreateLinkInput;
};


export type MutationCreateVoteArgs = {
  input: CreateVoteInput;
};


export type MutationSignInUserArgs = {
  input: SignInUserInput;
};


export type MutationSignUpArgs = {
  input: SignUpInput;
};

/** The query root of this schema */
export type Query = {
  __typename?: 'Query';
  allLinks: Array<Link>;
  /** 全カテゴリを取得する */
  categories: Array<Category>;
  /** 全カテゴリを各カテゴリ10件の質問と一緒に取得する */
  categoriesWithTenQuestions: Array<Category>;
  /** Find a category by name_en */
  category: Category;
  /** Find a question by ID */
  question: Question;
};


/** The query root of this schema */
export type QueryCategoryArgs = {
  nameEn: Scalars['String'];
};


/** The query root of this schema */
export type QueryQuestionArgs = {
  id: Scalars['ID'];
};

export type Question = {
  __typename?: 'Question';
  comments: Array<Comment>;
  content: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['Int'];
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
};

/** Autogenerated input type of SignInUser */
export type SignInUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  credentials?: InputMaybe<Email_Auth_Credentials>;
};

/** Autogenerated return type of SignInUser */
export type SignInUserPayload = {
  __typename?: 'SignInUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
};

/** Autogenerated input type of SignUp */
export type SignUpInput = {
  authProvider?: InputMaybe<EmailAuthProviderSignUpData>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['ISO8601DateTime'];
  email: Scalars['String'];
  icon?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  links: Array<Link>;
  name: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  votes: Array<Vote>;
};

export type Vote = {
  __typename?: 'Vote';
  id: Scalars['ID'];
  link: Link;
  user: User;
};
