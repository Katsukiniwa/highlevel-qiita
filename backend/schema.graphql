type Category {
  createdAt: ISO8601DateTime!
  icon: String!
  id: Int!
  name: String!
  nameEn: String!
  questions: [Question!]!
  updatedAt: ISO8601DateTime!
}

type CategoryQuestionListPage {
  category: Category!
  currentPage: Int!
  lastPage: Int!
  pageSize: Int!
  questions: [Question!]!
}

type Comment {
  content: String!
  createdAt: ISO8601DateTime!
  id: Int!
  question: Question!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
Autogenerated input type of CreateLink
"""
input CreateLinkInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String!
  url: String!
}

"""
Autogenerated input type of CreateQuestion
"""
input CreateQuestionInput {
  categoryId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String!
  title: String!
}

"""
Autogenerated input type of CreateVote
"""
input CreateVoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  linkId: ID
}

input EMAIL_AUTH_CREDENTIALS {
  email: String!
  password: String!
}

input EmailAuthProviderSignUpData {
  credentials: EMAIL_AUTH_CREDENTIALS
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Link {
  description: String!
  id: ID!
  postedBy: User
  url: String!
  votes: [Vote!]!
}

input LinkFilter {
  OR: [LinkFilter!]
  descriptionContains: String
  urlContains: String
}

type Mutation {
  createLink(
    """
    Parameters for CreateLink
    """
    input: CreateLinkInput!
  ): Link
  createQuestion(
    """
    Parameters for CreateQuestion
    """
    input: CreateQuestionInput!
  ): Question
  createVote(
    """
    Parameters for CreateVote
    """
    input: CreateVoteInput!
  ): Vote
  signInUser(
    """
    Parameters for SignInUser
    """
    input: SignInUserInput!
  ): SignInUserPayload
  signUp(
    """
    Parameters for SignUp
    """
    input: SignUpInput!
  ): User
}

"""
The query root of this schema
"""
type Query {
  allLinks(filter: LinkFilter, first: Int, skip: Int): [Link]!

  """
  全カテゴリを取得する
  """
  categories: [Category!]!

  """
  全カテゴリを各カテゴリ10件の質問と一緒に取得する
  """
  categoriesWithTenQuestions: [Category!]!

  """
  Find a category by name_en
  """
  category(nameEn: String!): Category!

  """
  Get questions per category
  """
  categoryQuestions(categoryId: ID!, page: Int!): CategoryQuestionListPage!

  """
  Find a question by ID
  """
  question(id: ID!): Question!
  questions: [Question!]!

  """
  Get questions per page
  """
  questionsPerPage(page: Int!): QuestionListPage!
}

type Question {
  comments: [Comment!]!
  content: String!
  createdAt: ISO8601DateTime!
  id: Int!
  title: String!
  updatedAt: ISO8601DateTime!
  user: User!
}

type QuestionListPage {
  currentPage: Int!
  lastPage: Int!
  pageSize: Int!
  questions: [Question!]!
}

"""
Autogenerated input type of SignInUser
"""
input SignInUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  credentials: EMAIL_AUTH_CREDENTIALS
}

"""
Autogenerated return type of SignInUser
"""
type SignInUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String
  user: User
}

"""
Autogenerated input type of SignUp
"""
input SignUpInput {
  authProvider: EmailAuthProviderSignUpData

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

type User {
  createdAt: ISO8601DateTime!
  email: String!
  icon: String
  id: Int!
  links: [Link!]!
  name: String!
  updatedAt: ISO8601DateTime!
  votes: [Vote!]!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}
